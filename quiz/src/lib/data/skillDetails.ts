interface SkillLevel {
  current: string[];
  next: string[];
}

interface SkillDetails {
  [key: string]: {
    [level: number]: SkillLevel;
  };
}

export const skillDetails: SkillDetails = {
  components: {
    1: {
      current: [
        'Создание простых функциональных компонентов',
        'Базовая структура компонента',
        'Простой JSX синтаксис'
      ],
      next: [
        'Передача и использование props',
        'Композиция компонентов',
        'Условный рендеринг'
      ]
    },
    2: {
      current: [
        'Работа с props и композицией',
        'Управление состоянием компонента',
        'Обработка событий'
      ],
      next: [
        'Продвинутые паттерны компонентов',
        'Оптимизация производительности',
        'Работа с HOC и рендер-пропсами'
      ]
    }
  },
  hooks: {
    1: {
      current: [
        'Использование useState и useEffect',
        'Базовые правила хуков',
        'Простая работа с эффектами'
      ],
      next: [
        'Использование useContext и useReducer',
        'Создание пользовательских хуков',
        'Оптимизация с помощью useMemo'
      ]
    },
    2: {
      current: [
        'Работа со всеми встроенными хуками',
        'Создание простых кастомных хуков',
        'Управление сайд-эффектами'
      ],
      next: [
        'Сложные кастомные хуки',
        'Оптимизация с useCallback',
        'Работа с useImperativeHandle'
      ]
    }
  }
};

export const recommendations = {
  components: {
    0: [
      'Изучите основы JSX синтаксиса',
      'Научитесь создавать простые функциональные компоненты',
      'Разберитесь с базовой структурой React компонента'
    ],
    1: [
      'Освойте работу с props и их типизацией',
      'Изучите композицию компонентов',
      'Практикуйте создание переиспользуемых компонентов'
    ],
    2: [
      'Изучите паттерны проектирования компонентов',
      'Освойте работу с Higher-Order Components',
      'Разберитесь с оптимизацией производительности компонентов'
    ]
  },
  hooks: {
    0: [
      'Начните с изучения useState и useEffect',
      'Поймите основные правила хуков',
      'Научитесь управлять состоянием компонента'
    ],
    1: [
      'Освойте работу с useContext и useReducer',
      'Научитесь создавать пользовательские хуки',
      'Изучите хуки для оптимизации (useMemo, useCallback)'
    ],
    2: [
      'Создавайте сложные кастомные хуки',
      'Освойте работу с useImperativeHandle',
      'Изучите продвинутые техники оптимизации с хуками'
    ]
  },
  state: {
    0: [
      'Изучите основы управления состоянием',
      'Поймите разницу между локальным и глобальным состоянием',
      'Научитесь работать с формами в React'
    ],
    1: [
      'Освойте работу с Context API',
      'Изучите паттерны управления состоянием',
      'Практикуйте работу с комплексными формами'
    ],
    2: [
      'Разберитесь с Redux и другими менеджерами состояния',
      'Изучите иммутабельность и её важность',
      'Освойте продвинутые техники управления состоянием'
    ]
  },
  lifecycle: {
    0: [
      'Поймите основные этапы жизненного цикла',
      'Изучите базовые методы жизненного цикла',
      'Научитесь использовать useEffect для разных сценариев'
    ],
    1: [
      'Освойте работу с cleanup в useEffect',
      'Изучите оптимизацию рендеринга',
      'Разберитесь с условным рендерингом'
    ],
    2: [
      'Изучите особые случаи использования useLayoutEffect',
      'Освойте техники мемоизации',
      'Разберитесь с продвинутыми паттернами жизненного цикла'
    ]
  },
  performance: {
    0: [
      'Изучите основы оптимизации React приложений',
      'Поймите когда происходит ререндеринг',
      'Научитесь использовать React Developer Tools'
    ],
    1: [
      'Освойте работу с React.memo',
      'Изучите профилирование React приложений',
      'Практикуйте оптимизацию ререндеринга'
    ],
    2: [
      'Разберитесь с Code Splitting и ленивой загрузкой',
      'Освойте продвинутые техники оптимизации',
      'Изучите серверный рендеринг'
    ]
  }
};
